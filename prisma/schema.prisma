// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id              String         @id    @default(uuid())
  clerkUserId     String         @unique
  email           String         @unique
  name            String?
  imageUrl        String?
  industry        String?
  industryInsight IndustryInsight? @relation(fields: [industry],references: [industry])
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  bio             String?
  experience      Int?            // Years of experience
  skills          String[]        //array of skills


  assessments    Assessment[]
  resume         Resume?
  coverLetter    CoverLetter[]
}

model Assessment {
  id             String         @id     @default(cuid())
  userId         String
  user           User           @relation(fields: [userId], references: [id])
  quizScore      Float          // Overall quiz score
  questions      Json[]         // Array of {question, answer, userAnswer, isCorrect}
  category       String         // "Technical", "Behavioral", etc.
  improvementTip  String?       // AI-generated improvement tip

  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([userId])
}

model Resume {

  id             String         @id     @default(cuid())
  userId         String         @unique   //one Resume Per User
  user           User           @relation(fields: [userId], references: [id])
  content        String         @db.Text  //Markdown Content
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

}

model CoverLetter {
  id             String         @id     @default(cuid())
  userId         String         //one Resume Per User
  user           User           @relation(fields: [userId], references: [id])
  content        String         
  jobDescription String?
  companyName    String
  jobTitle       String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([userId])
}

enum MarketOutlook {
  POSITIVE
  NEUTRAL
  NEGATIVE
}

enum DemandLevel {
  HIGH
  MEDIUM
  LOW
}

model IndustryInsight {
  id                  String           @id   @default(cuid())
  industry            String           @unique     //the industry this data belongs to tech-software-development
  

  // Users in this industry
  users         User[]
  
  // Salary data
  salaryRanges  Json[]    // Array of { role: string, min: float, max: float, median: float, location: string? }
  
  // Industry trends
  growthRate    Float     // Industry growth rate
  demandLevel   DemandLevel    // "High", "Medium", "Low"
  topSkills     String[]  // Most in-demand skills
  
  // Market conditions
  marketOutlook  MarketOutlook   // "Positive", "Neutral", "Negative"
  keyTrends     String[]  // Array of current industry trends
  
  // Learning suggestions
  recommendedSkills String[]  // Skills recommended for the industry
  
  lastUpdated   DateTime  @default(now())
  nextUpdate    DateTime  // Scheduled update time

  @@index([industry])


}